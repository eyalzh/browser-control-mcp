import { WebsocketClient } from "./client";
import { MessageHandler } from "./message-handler";

const WS_PORTS = [8081, 8082];

// config.json is generated by the main build process (root directory)
// and contains the secret key for the browser extension
const configUrl = browser.runtime.getURL("dist/config.json");

async function getConfig() {
  const response = await fetch(configUrl);

  if (!response.ok) {
    throw new Error(
      "Failed to load config.json - make sure to run the postbuild step in the root directory"
    );
  }
  const config = await response.json();
  return config;
}

function initClient(port: number, secret: string) {
  const wsClient = new WebsocketClient(port, secret);
  const messageHandler = new MessageHandler(wsClient);

  wsClient.connect();

  wsClient.addMessageListener(async (message) => {
    console.log("Message from server:", message);

    try {
      await messageHandler.handleDecodedMessage(message);
    } catch (error) {
      console.error("Error handling message:", error);
      if (error instanceof Error) {
        await wsClient.sendErrorToServer(
          message.correlationId,
          error.message
        );
      }
    }
  });

}

getConfig()
  .then((config) => {
    const secret = config.secret;
    if (!secret) {
      console.error("Secret not found in config.json");
      return;
    }
    for (const port of WS_PORTS) {
      initClient(port, secret);
    }
    console.log("Browser extension initialized");
  })
  .catch((error) => {
    console.error("Error loading config.json:", error);
  });
